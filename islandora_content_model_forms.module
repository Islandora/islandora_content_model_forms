<?php

/**
 * @file
 *
 */

/**
 * Modules
 */
module_load_include('inc', 'php_lib', 'Array');

/**
 * Constants
 */
define("PERM_ADMIN_FORM_ASSOCIATION", 'Administer Form Associations');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function islandora_content_model_forms_menu() {
  // List existing associations, include a form for adding more.
  $items['admin/islandora/model/forms'] = array(
    'title' => 'Form associations',
    'description' => 'Associate metadata ingest forms with Islandora content models.',
    'page callback' => 'islandora_content_model_forms_list',
    'access arguments' => array(PERM_ADMIN_FORM_ASSOCIATION), // Use something fedora specific.
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/model/forms/autocomplete'] = array(
    'title' => 'Auto Complete List of Models.',
    'description' => 'Lists Content Models.',
    'page callback' => 'islandora_content_model_forms_autocomplete',
    'access arguments' => array(PERM_ADMIN_FORM_ASSOCIATION), // Use something fedora specific.
    'type' => MENU_CALLBACK,
  );
  $items['admin/islandora/model/forms/titles'] = array(
    'title' => 'List of elements to use as titles.',
    'description' => 'Lists Elements in a form.',
    'page callback' => 'islandora_content_model_forms_ahah',
    'access arguments' => array(PERM_ADMIN_FORM_ASSOCIATION), // Use something fedora specific.
    'type' => MENU_CALLBACK,
  );
  // Remove existing associations, redirect back to list.
  $items['admin/islandora/model/forms/disable/%/%'] = array(
    'title' => 'Disable Form Association.',
    'description' => 'Disable associated form.',
    'page callback' => 'islandora_content_model_forms_disable_association',
    'page arguments' => array(5,6),
    'access arguments' => array(PERM_ADMIN_FORM_ASSOCIATION), // Use something fedora specific.
    'type' => MENU_CALLBACK,
  );
  // Remove existing associations, redirect back to list.
  $items['admin/islandora/model/forms/remove/%'] = array(
    'title' => 'Remove Form Association.',
    'description' => 'Removes a associated form.',
    'page callback' => 'islandora_content_model_forms_remove',
    'page arguments' => array(5),
    'access arguments' => array(PERM_ADMIN_FORM_ASSOCIATION), // Use something fedora specific.
    'type' => MENU_CALLBACK,
  );
  // Get the list of forms for the given form
  $items['admin/islandora/model/%/forms'] = array(
    'page callback' => 'islandora_content_model_get_form_names_ahah',
    'access arguments' => array(PERM_ADMIN_FORM_ASSOCIATION), // Use something fedora specific.
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  // Ingest form implementation callback
  $items['islandora/ingest_form/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_content_model_forms_get_ingest_form', 2),
    'access arguments' => array(FEDORA_INGEST),
    'file' => 'includes/ingest.form.inc',
    'type' => MENU_CALLBACK,
  );

  // Edit form implementation callback
  $items['islandora/edit_form/%/%'] = array(
    'title' => 'Edit form',
    'title callback' => 'islandora_content_model_forms_title_callback',
    'title arguments' => array(2, 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_content_model_forms_get_edit_form', 2, 3),
    'access arguments' => array(FEDORA_METADATA_EDIT),
    'file' => 'includes/edit.form.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 *
 * @return array
 */
function islandora_content_model_forms_admin_paths() {
  $paths = array();
  $paths['*/ingest_form*'] = TRUE;
  $paths['*/edit_form*'] = TRUE;
  return $paths;
}

/**
 * Implements hook_permission(). Register permissions().
 *
 * @return array
 */
function islandora_content_model_forms_permission() {
  return array(
    PERM_ADMIN_FORM_ASSOCIATION => array(
      'title' => t(PERM_ADMIN_FORM_ASSOCIATION),
      'description' => t('Associate XML Forms and XSLT with Islandora content models and datastreams.'),
    ),
  );
}

function islandora_content_model_forms_islandora_xml_form_builder_forms() {
  return array(
    'default DC form' => array(
      'form_file' => drupal_get_path('module', 'islandora_content_model_forms') . '/data/definitions/oai_dc_basic.xml',
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function islandora_content_model_forms_theme() {
  return array(
    'islandora_content_model_forms_list' => array(
      'variables' => array('list' => NULL, 'form' => NULL),
      'template' => 'islandora-content-model-forms-list',
      'path' => drupal_get_path('module', 'islandora_content_model_forms') . '/templates',
    ),
  );
}

/**
 * Implements hook_islandora_ingest_registry().
 *
 * @param FedoraObject $collection_pid
 */

function islandora_content_model_forms_islandora_ingest_registry($collection_object) {
  module_load_include('inc', 'islandora_content_model_forms', 'includes/ingest.form');
  $potential_models = islandora_content_model_forms_get_potential_content_models($collection_object);

  $form_names = array();
  if (is_array($potential_models)) {
    foreach ($potential_models AS $pid => $identifier) {
      $form_names += islandora_content_model_get_form_names($pid);
    }
  }

  if (count($form_names) > 0) {
    return array(
      array(
        'Name' => t('Islandora Content Model Forms'),
        'url' => 'islandora/ingest_form/' . $collection_object->id,
        'weight' => 5,
      ),
    );
  }
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 *
 * @param string $collection_pid
 */
function islandora_content_model_forms_islandora_edit_datastream_registry($object, $ds_id) {
  module_load_include('inc', 'islandora_content_model_forms', 'includes/ingest.form');
  $potential_models = $object->models;

  $form_names = array();
  if (is_array($potential_models)) {
    foreach ($potential_models AS $pid) {
      $form_names += islandora_content_model_get_form_names($pid, $ds_id);
    }
  }

  if (count($form_names) > 0) {
    return array(
      array(
        'Name' => t('Islandora Content Model Forms'),
        'url' => 'islandora/edit_form/' . $object->id . '/' . $ds_id,
        'weight' => 5,
      ),
    );
  }
}

/**
 * Lists the existing forms.
 */
function islandora_content_model_forms_list() {
  $path = drupal_get_path('module', 'islandora_content_model_forms');
  $list = array();
  $result = db_query('SELECT * FROM {islandora_content_model_forms}')->fetchAll();
  foreach ($result AS $data) {
    $list[] = array(
      'type' => 'custom',
      'id' => $data->id,
      'content_model' => $data->content_model,
      'form_name' => $data->form_name,
      'dsid' => $data->dsid,
      'title_field' => $data->title_field,
      'transform' => $data->transform, 
      'template' => $data->template != '',
    );
  }

  $hook_forms = islandora_content_model_forms_get_hook_associations();

  foreach($hook_forms as $key => $hook_form){
    $hook_form['id'] = $key;
    $hook_form['type'] = 'hook';
    // tranform a potential string to boolean
    $hook_form['template'] = ($hook_form['template'] != '');
    array_unshift($list, $hook_form);
  }

  return theme('islandora_content_model_forms_list', array('list' => $list, 'form' => drupal_get_form('islandora_content_model_forms_list_form')));
}

/**
 * Returns the associations defined by the hook along with their status from
 * the database.
 *
 * @param boolean $only_return_enabled
 *   If this value is true then only forms that are enabled are returned.
 *
 * @return array
 */
function islandora_content_model_forms_get_hook_associations($only_return_enabled = FALSE) {
  $hook_associations = module_invoke_all('islandora_content_model_forms_form_associations');
  $return_associations = array();

  $associations = db_select('islandora_content_model_forms_association_hooks', 'cm')
    ->fields('cm')
    ->execute();

  foreach($associations as $association) {
    if(isset($hook_associations[$association->id])) {
      $hook_associations[$association->id]['enabled'] = ($association->enabled == 1);
      $hook_associations[$association->id]['in_db'] = TRUE;

      if(($only_return_enabled && $association->enabled == 1) || !$only_return_enabled) {
        $return_associations[$association->id] = $hook_associations[$association->id];
      }
      
      unset($hook_associations[$association->id]);
    }
  }

  foreach($hook_associations as $key => $assocation) {
    $assocation['enabled'] = TRUE;
    $assocation['in_db'] = FALSE;
    $return_associations[$key] = $assocation;
  }

  return $return_associations;
}

/**
 * @TODO Please document this function.
 * @see http://drupal.org/node/1354
 */
function islandora_content_model_forms_get_transform_path($name) {
  $transforms = module_invoke_all('islandora_content_model_forms_get_transforms');

  if (array_key_exists($name, $transforms)) {
    return $transforms[$name];
  }
  else {
    return NULL;
  }
}

/**
 * Remove the association identified by $id.
 *
 * @param int $id
 */
function islandora_content_model_forms_remove($id) {
  db_delete('islandora_content_model_forms')
  ->condition('id', (int) $id)
  ->execute();
  drupal_set_message(t('Successfully removed association.'));
  drupal_goto('admin/islandora/model/forms');
}

/**
 * Remove the association identified by $id.
 *
 * @param int $id
 */
function islandora_content_model_forms_disable_association($id, $disable) {
  $hook_forms = islandora_content_model_forms_get_hook_associations();
  if(!isset($hook_forms[$id])) {
    drupal_set_message(t('Specified association does not exist.'), 'error');
    drupal_goto('admin/islandora/model/forms');
    return '';
  }

  if($hook_forms[$id]['in_db']) {
    db_update('islandora_content_model_forms_association_hooks')
      ->fields(array('enabled' => ($disable == 'true') ? 0 : 1))
      ->condition('id', $id)
      ->execute();
  }
  else {
    db_insert('islandora_content_model_forms_association_hooks')
      ->fields(array(
        'id' => $id,
        'enabled' => ($disable == 'true') ? 0 : 1,
      ))
      ->execute();
  }

  if($disable == 'true') {
    drupal_set_message(t('Successfully disabled association.'));
  }
  else {
    drupal_set_message(t('Successfully enabled association.'));
  }
  drupal_goto('admin/islandora/model/forms');
}

/**
 * Render the form for adding new associations.
 *
 * @param array $form_state
 * @return array
 */
function islandora_content_model_forms_list_form($form, array &$form_state) {
  $content_models = islandora_content_model_forms_get_content_model_names();
  $form_names = islandora_content_model_forms_get_form_names();
  $transforms = islandora_content_model_forms_get_transforms();

  if (count($form_names) == 0) {
    drupal_set_message(t('No forms defined, both forms and content models must be defined to add new associations.'), 'error');
    return;
  }
  $form_name = isset($form_state['values']['name']) ?
      $form_state['values']['name'] :
      key($form_names);

  $form = array(
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('Add Association'),
      'content_model' => array(
        '#type' => 'textfield',
        '#title' => t('Content Model'),
        '#required' => TRUE,
        '#autocomplete_path' => 'admin/islandora/model/forms/autocomplete',
        '#description' => t('The content model to associate with a form. If the content model has no decendants it will not show up in autocomplete.'),
        '#default_value' => isset($form_state['values']['content_model']) ? $form_state['values']['content_model'] : NULL,
      ),
      'dsid' => array(
        '#type' => 'textfield',
        '#description' => t('The datastream ID of where the objects metadata is stored.'),
        '#title' => t('Metadata Datastream ID'),
        '#required' => TRUE,
        '#default_value' => isset($form_state['values']['dsid']) ? $form_state['values']['dsid'] : NULL,
      ),
      'name' => array(
        '#type' => 'select',
        '#title' => t('Form Name'),
        '#description' => t('The name of the form to associate with the content model.'),
        '#options' => $form_names,
        '#default_value' => $form_name,
        '#ajax' => array(
          'callback' => 'islandora_content_model_forms_ahah',
          'wrapper' => 'ahah-wrapper',
          'effect' => 'fade',
          'method' => 'replace',
        ),
      ),
      'title_field' => array(
        '#type' => 'select',
        '#title' => t('Title Field'),
        '#description' => t('The form field that you want to use for the objects label.'),
        '#prefix' => '<div id="ahah-wrapper">',
        '#suffix' => '</div>',
        '#options' => islandora_content_model_forms_get_title_options($form_name),
        '#required' => TRUE,
      ),
      'transform' => array(
        '#type' => 'select',
        '#title' => t('XSL Transform'),
        '#options' => array_combine($transforms, $transforms),
        '#default_value' => 'No Transform',
        '#description' => t('A xsl transform for setting the Fedora Object\'s Dublin Core metadata datastream.'),
      ),
      'file' => array(
        '#type' => 'file',
        '#title' => t('Upload Template Document'),
        '#description' => t('A sample metadata file used to prepopulate the form on ingest.'),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Add Association'),
      ),
    ),
  );
  return $form;
}

/**
 * Form list form validation.
 *
 * @param array $form
 * @param array $form_state
 */
function islandora_content_model_forms_list_form_validate(array $form, array &$form_state) {
  $content_model_pid = $form_state['values']['content_model'];
  $form_name = $form_state['values']['name'];
  $form_association_exists = islandora_content_model_association_exists($content_model_pid, $form_name);
  if ($form_association_exists) {
    form_set_error('name', "Form Association between '$content_model_pid' and '$form_name' already exists.");
  }
}

/**
 * Add a new association.
 *
 * @param array $form_state
 */
function islandora_content_model_forms_list_form_submit(array $form, array &$form_state) {
  $object = new stdClass();
  $object->content_model = $form_state['values']['content_model'];
  $object->form_name = $form_state['values']['name'];
  $object->dsid = $form_state['values']['dsid'];
  $object->title_field = $form_state['values']['title_field'];
  $object->transform = $form_state['values']['transform'];
  $object->template = '';
  $file_uploaded = $_FILES['files']['error']['file'] == 0;
  if ($file_uploaded) {
    $definition = new DOMDocument();
    $definition->load($_FILES['files']['tmp_name']['file']);
    $object->template = $definition->saveXML();
  }
  if (drupal_write_record('islandora_content_model_forms', $object) !== FALSE) {
    drupal_set_message(t('Successfully added association.'));
  }
  else {
    drupal_set_message(t('Failed to add association.'), 'error');
  }
}

/**
 * Gets a map of form names suitable for use as select #options.
 */
function islandora_content_model_forms_get_content_model_names() {
  $content_models = array();
  $content = islandora_content_model_forms_query_content_models();
  return islandora_content_model_forms_parse_query($content);
}

/**
 * @return string
 */
function islandora_content_model_forms_query_content_models() {
  module_load_include('inc', 'islandora', 'includes/tuque');

  $connection = new IslandoraTuque();

  $query = 'select $object  $model from <#ri>
  where (walk($model <fedora-model:hasModel><info:fedora/fedora-system:ContentModel-3.0>
  and $model <fedora-model:hasModel> $object))
  minus $object <mulgara:is><info:fedora/fedora-system:FedoraObject-3.0>
  minus $object <mulgara:is><info:fedora/fedora-system:ContentModel-3.0>
  minus $object <mulgara:is><info:fedora/fedora-system:ServiceDefinition-3.0>
  minus $object <mulgara:is><info:fedora/fedora-system:ServiceDeployment-3.0>
  order by $object';

  $results = $connection->repository->ri->itqlQuery($query);

  return $results;
}

/**
 *
 * @param string $content
 * @return array
 */
function islandora_content_model_forms_parse_query($content) {
  $content_models = array();
  foreach ($content as $model) {
    $content_models[] = $model['object']['value'];
  }
  $content_models = array_unique($content_models);
  $content_models = array_values($content_models);

  return $content_models;
}

/**
 * Gets a map of form names suitable for use as select #options.
 *
 * @return array
 */
function islandora_content_model_forms_get_form_names() {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  $form_names = XMLFormRepository::GetNames();
  $names = array();
  foreach($form_names as $name) {
    $names[$name['name']] = $name['name'];
  }

  return $names;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function islandora_content_model_forms_get_transforms() {
  $tranforms = module_invoke_all('islandora_content_model_forms_get_transforms');
  $tranforms['No Transform'] = 'No Transform';
  return $tranforms;
}

/**
 * Implementation of islandora_content_model_forms_get_transforms
 * @return array
 */
function islandora_content_model_forms_islandora_content_model_forms_get_transforms() {
  $p = drupal_get_path('module', 'islandora_content_model_forms');
  $transforms = array();
  $include_path = "$p/transforms";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.xslt?$/', $file)) {
        $transforms["$file (Islandora)"] = "$include_path/$file";
      }
    }
  }
  closedir($dir);
  return $transforms;
}

/**
 * Autocomplete the content model name..
 *
 * @param string $string
 * @return string
 */
function islandora_content_model_forms_autocomplete($string) {
  $content_models = islandora_content_model_forms_get_content_model_names();
  $output = array();
  foreach ($content_models as $value) {
    if (preg_match("/{$string}/i", $value) !== 0) {
      $output[$value] = $value;
    }
  }
  $output[$string] = $string;
  return drupal_json_output($output);
}

/**
 * Get form names, optional condition on datastream ID.
 *
 * @param string $content_model
 * @return array
 */
function islandora_content_model_get_form_names($content_model, $ds = NULL) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  $list = array();
  $query = db_select('islandora_content_model_forms', 'icmf')
    ->fields('icmf', array('form_name', 'dsid', 'content_model'));

  if (!is_null($ds)) {
    $query->condition('dsid', $ds);
  }
  $result = $query->execute();
  foreach ($result as $data) {
    if ($data->content_model == $content_model && XMLFormRepository::Valid($data->form_name)) {
      $list[$data->form_name] = "{$data->form_name} ({$data->dsid})";
    }
  }

  $hook = islandora_content_model_forms_get_hook_associations(TRUE);
  foreach ($hook as $data) {
    if ($data['content_model'] == $content_model && XMLFormRepository::Valid($data['form_name'])) {
      if($ds == NULL || $ds == $data['dsid']) {
        $list[$data['form_name']] = "{$data['form_name']} ({$data['dsid']})";
      }
    }
  }

  return $list;
}

/**
 *
 * @param string $content_model
 * @return string
 */
function islandora_content_model_get_form_names_ahah($content_model) {
  $list = islandora_content_model_get_form_names($content_model);
  return drupal_json_output($list);
}

/**
 *
 * @param string $content_model_pid
 * @param string $form_name
 */
function islandora_content_model_association_exists($content_model_pid, $form_name) {
  $result = db_query("SELECT id FROM {islandora_content_model_forms} where content_model = :model AND form_name = :form_name", array(':model' => $content_model_pid, ':form_name' => $form_name))->fetchCol();
  foreach ($result AS $data) {
    if (isset($data)) {
      return TRUE;
    }
  }
  
  $results = islandora_content_model_forms_get_hook_associations();
  foreach($results as $result) {
    if($result['content_model'] == $content_model_pid && $result['form_name'] == $form_name) {
      return TRUE;
    }
  }

  return FALSE;
}



/**
 * @todo Change around the ingest form when there is only one CM.
 * @todo Fix the schema cache stuff.
 */


/**
 *
 * @param string $content_model_pid
 * @param string $form_name
 * @return string
 */
function islandora_content_model_get_dsid($content_model_pid, $form_name) {
  $result = db_query("SELECT dsid FROM {islandora_content_model_forms} where content_model = :content_model AND form_name = :form_name", array(':content_model' => $content_model_pid, ':form_name' => $form_name))->fetchCol();
  if (!empty($result)) {
    return $result[0];
  }

  $hooks = islandora_content_model_forms_get_hook_associations(TRUE);
  foreach($hooks as $hook) {
    if($hook['content_model'] == $content_model_pid && $hook['form_name'] == $form_name) {
      return $hook['dsid'];
    }
  }

  return NULL;
}

/**
 *
 * @param string $content_model_pid
 * @param string $form_name
 * @return string
 */
function islandora_content_model_get_title_field($content_model_pid, $form_name) {
  $result = db_query("SELECT title_field FROM {islandora_content_model_forms} where content_model = :content_model AND form_name = :form_name",
    array(':content_model' => $content_model_pid, ':form_name' => $form_name))->fetchCol();
  if (!empty($result)) {
    return $result[0];
  }

  $hooks = islandora_content_model_forms_get_hook_associations(TRUE);
  foreach($hooks as $hook) {
    if($hook['content_model'] == $content_model_pid && $hook['form_name'] == $form_name) {
      return $hook['title_field'];
    }
  }

  return NULL;
}

/**
 *
 * @param type $content_model_pid
 * @param type $form_name
 * @return type
 */
function islandora_content_model_get_template($content_model_pid, $form_name) {
  $result = db_query("SELECT template FROM {islandora_content_model_forms} where content_model = :content_model AND form_name = :form_name",
    array(':content_model' => $content_model_pid, ':form_name' => $form_name))->fetchCol();
  if (!empty($result) && $result[0] != '') {
    return $result[0];
  }

  $hooks = islandora_content_model_forms_get_hook_associations(TRUE);
  foreach($hooks as $hook) {
    if($hook['content_model'] == $content_model_pid && $hook['form_name'] == $form_name) {
      return $hook['template'];
    }
  }

  return NULL;
}

/**
 *
 * @param string $content_model_pid
 * @param string $form_name
 * @return string
 */
function islandora_content_model_get_transform($content_model_pid, $form_name) {
  $result = db_query("SELECT transform FROM {islandora_content_model_forms} where content_model = :content_model AND form_name = :form_name",
    array(':content_model' => $content_model_pid, ':form_name' => $form_name))->fetchCol();
  foreach ($result AS $data) {
    if (isset($data)) {
      $path = islandora_content_model_forms_get_transform_path($data);
      return $path;
    }
  }

  $hooks = islandora_content_model_forms_get_hook_associations(TRUE);
  foreach($hooks as $hook) {
    if($hook['content_model'] == $content_model_pid && $hook['form_name'] == $form_name) {
      return islandora_content_model_forms_get_transform_path($hook['transform']);
    }
  }

  return NULL;
}

/**
 *
 * @param string $form_name
 * @return array
 */
function islandora_content_model_forms_get_title_options($form_name) {
  if (isset($form_name)) {
    module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
    $doc = XMLFormRepository::Get($form_name);
    if ($doc) {
      $xpath = new DOMXPath($doc);
      $result = $xpath->query('//element[@name]');
      $elements = dom_node_list_to_array($result);
      if (count($elements) > 0) {
        $output = array();
        foreach ($elements as $element) {
          $result = $xpath->query('ancestor-or-self::node()[@name]', $element);
          $ancestors = dom_node_list_to_array($result);
          $value = $label = '';
          if (count($ancestors) > 0) {
            foreach ($ancestors as $ancestor) {
              $name = $ancestor->getAttribute('name');
              $value .= "['$name']";
              $label .= "['$name']";
            }
          }
          $output[$value] = $label;
        }
        return $output;
      }
    }
  }
  return array(NULL => 'invalid');
}

/**
 *  Title field callback for form association form.
 */
function islandora_content_model_forms_ahah($form, $form_state) {
  return $form['fieldset']['title_field'];
}

/**
 * Callback function for datastream
 *
 * @param string $pid
 *   PID name to get label from
 * @param string $ds_id
 *   Datastream ID to indicate which datastream to call a form for.
 *   In this function just used for the string.
 * @return string
 *   Page title
 *
 * @note: I wanted to put this in edit.form.inc. The function and arguments got called,
 *   but the returned string didn't apply to the title.
 */
function islandora_content_model_forms_title_callback($pid, $ds_id = NULL) {
  // get label
  $islandora_object = islandora_object_load($pid);
  $label = $islandora_object->label;

  // return title
  if ($ds_id != NULL) {
    return t('@label - edit @dsid', array('@label' => $label, '@dsid' => $ds_id));
  }
  else {
    return $label;
  }
}

